@page "/gameinfo"
@inject IHttpClientFactory ClientFactory

<h1 style="text-align: center; font-family:Impact;">Live NBA Scores</h1>

@if (nbaGames == null)
{
    <p>Loading...</p>
     
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Commence Time
                     
                    <button @onclick="ToggleSortOrder" style="padding: 5px 10px; background-color: orangered; color: white; border: none; border-radius: 5px; cursor: pointer;">(@(sortAscending ? " Earliest " : " Latest "))</button>

                </th>
                <th>Completed</th>
                <th>Home Team</th>
                <th>Scores</th>
                <th>Away Team</th>
                <th>last update</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var game in nbaGames)
            {
                <tr>
                    <td>@game.commence_time</td>
                    <td>@game.completed</td>
                    <td>@game.home_team</td>
                    <td>@game.convertScore()</td>
                    <td>@game.away_team</td>
                    <td>@game.convertLastUpdate()</td>
                </tr>
            }
        </tbody>
    </table>
       
}

@code {
    // list of nba games
    private List<GameInformation.NbaGame> nbaGames;

    // tracking if order is ascending or descending
    private bool sortAscending = true;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetching data from the API
             var client = ClientFactory.CreateClient("OddsApiClient");
             nbaGames = await client.GetFromJsonAsync<List<GameInformation.NbaGame>>("sports/basketball_nba/scores/?daysFrom=1&apiKey=990cde0352439446105fdb349bb3e5b0");

            SortGames();

        }
        catch (Exception e)
        {
            Console.WriteLine("Error Message");
        }
    }

    // toggle sorting order
    private void ToggleSortOrder()
    {
        sortAscending = !sortAscending;
        SortGames();
    }

    private void SortGames()
    {
        if(sortAscending)
        {
            // sort in ascending order
            nbaGames = nbaGames.OrderBy(game => game.commence_time).ToList();
        }
        else
        {
            // sort in descending order
            nbaGames = nbaGames.OrderByDescending(game => game.commence_time).ToList();
        }
    }
}
